head(data)
data <- read_csv("country_daywise.csv")
print(data)
head(data)
covid$Date <- ymd(covid$Date)
data_daywise <- read_csv("country_daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
library(tidyverse)
library(plotly)
library(tidyverse)
data_daywise <- read_csv("country_daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
library(lubridate)
data_daywise <- read_csv("country_daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
data_countrywise <- read_csv("countrywise.csv")
head(data_countrywise)
head(daywise)
head(data_daywise)
daywise <- arrange(data_daywise, Date)
head(daywise)
plot_ly(daywise, x = Date, y = Confirmed, type = 'scatter', mode = 'lines')
plot_ly(daywise, x = ~Date, y = ~Confirmed, type = 'scatter', mode = 'lines')
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- plot_ly(daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter')
fig
plot_ly(daywise, x = ~Date, y = ~Confirmed, mode = 'lines')
plot_ly(daywise, x = ~Date, y = ~Confirmed, mode = 'lines', type = 'scatter')
plot_ly(daywise, x = ~Date, y = ~Confirmed, type = 'scatter')
data_daywise <- read_csv("country_daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
data_countrywise <- read_csv("countrywise.csv")
head(data_countrywise)
#Sortera på Date istället för
daywise <- arrange(data_daywise, Date)
head(daywise)
head(data_daywise)
plot_ly(daywise, x = ~Date, y = ~Confirmed, type = 'scatter')
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
data_daywise <- read_csv("daywise.csv")
data_daywise$Date <- ymd(data_daywise$Date)
head(data_daywise)
data_countrywise <- read_csv("countrywise.csv")
head(data_countrywise)
#Sortera på Date istället för land
data_daywise <- arrange(data_daywise, Date)
head(daywise)
head(data_daywise)
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter')
fig
fig
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/knn.R", echo=TRUE)
# Create classifier, run predictions on grid
model = nearest_neighbor( neighbors = 15, weight_func = 'inv' ) %>%
set_engine("knn") %>%
set_mode("classification") %>%
fit(Species ~ Sepal.Length + Sepal.Width, data = train_data)
# Create classifier, run predictions on grid
model = nearest_neighbor( neighbors = 15, weight_func = 'inv' ) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Species ~ Sepal.Length + Sepal.Width, data = train_data)
install.packages('kknn')
# Create classifier, run predictions on grid
model = nearest_neighbor( neighbors = 15, weight_func = 'inv' ) %>%
set_engine("kknn") %>%
set_mode("classification") %>%
fit(Species ~ Sepal.Length + Sepal.Width, data = train_data)
ll1 <- matrix(ll, length(ll), 1)
ww1 <- matrix(ww, length(ww), 1)
final <- data.frame(ll1, ww1)
colnames(final) = c("Sepal.Length", "Sepal.Width" )
pred <- model %>%
predict(final, type = 'prob')
dim_val <- dim(ll)
proba_setosa <- matrix(pred$.pred_setosa, dim_val[1], dim_val[2])
proba_versicolor <- matrix(pred$.pred_versicolor, dim_val[1], dim_val[2])
proba_virginica <- matrix(pred$.pred_virginica, dim_val[1], dim_val[2])
# Compute the classifier confidence
Z <- array(c(proba_setosa, proba_versicolor, proba_virginica), dim = c(dim_val[1],dim_val[2],3))
diff = aaply(Z, c(1,2), max) -  (aaply(Z, c(1,2), sum) - aaply(Z,c(1,2), max))
# Overlay the heatmap of the confidence on the scatter plot of the examples
fig <- plot_ly()
fig <- fig %>% add_trace(data=test_data, x = ~Sepal.Length, y = ~Sepal.Width, symbol = ~Species, split = ~Species, symbols = c('square-dot','circle-dot','diamond'),
type = 'scatter', mode = 'markers',
marker = list(size = 12, line = list(width = 1.5), color = 'lightyellow'))%>% layout(title="Prediction Confidence on Test Split")
fig <- fig %>% add_trace(x = lrange, y = wrange, z = diff, type = 'heatmap')
fig
library(plotly)
data <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines'
, name = 'Share Prices (in USD)')%>%
layout(title = 'Apple Share Prices over time (2014)',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE, width = 1100)
fig
#Exempel på hur man kan göra
data <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines'
, name = 'Share Prices (in USD)')
fig
fig <- fig %>%  layout(title = 'Apple Share Prices over time (2014)',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE, width = 1100)
fig
?plot_ly
#Exempel för plotly med enkel line plot -
data <- read.csv('https://raw.githubusercontent.com/plotly/datasets/master/2014_apple_stock.csv')
head(data)
#Exempel på "bare bones" - det som krävs för att få en enkel visual
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines', color = I("red")
, name = 'Share Prices (in USD)')
fig
print(I("red"))
#Exempel på "bare bones" - det som krävs för att få en enkel visual
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines', color = 'red'
, name = 'Share Prices (in USD)')
fig
#Exempel på "bare bones" - det som krävs för att få en enkel visual
fig <- plot_ly(x = as.Date(data$AAPL_x), y = data$AAPL_y, type = 'scatter', mode = 'lines', color = I('red')
, name = 'Share Prices (in USD)')
fig
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = death.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = recovered.line)
#Facit:
cnfrm.line <- list(color = I('green'), width = 4)
death.line <- list(color = I('red'), width = 6)
recovered.line <- list(color = I('blue'), width =2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = death.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = recovered.line)
fig
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/plotlyR.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/plotlyR.R", echo=TRUE)
fig
#Facit:
cnfrm.line <- list(color = I('green'), width = 4)
death.line <- list(color = I('red'), width = 6)
recovered.line <- list(color = I('blue'), width =2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Lägg till ett layoutargument med pipe operator som ger en titel och xaxis/yaxis titlar
#Facit:
fig <- fig %>% layout(title = 'Total Cases World Wide', xaxis = list(title = 'Date'), yaxis = list(title = 'Total Cases'))
fig
#Facit:
cnfrm.line <- list(color = 'blue', width = 4)
death.line <- list(color = 'red', width = 6)
recovered.line <- list(color = 'green', width =2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Ändra mode i confirmed till lines + markers
cnfrm.marker <- list(color=act, size = 2, opacity = 1)
#Ändra mode i confirmed till lines + markers
cnfrm.marker <- list(color='orange', size = 2, opacity = 1)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig
#Ändra mode i confirmed till lines + markers
cnfrm.marker <- list(color='orange', size = 3, opacity = 1)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig
#Ändra mode i confirmed till lines + markers
cnfrm.marker <- list(color='orange', size = 3, opacity = 1)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig
#Ändra mode i confirmed till lines + markers
cnfrm.marker <- list(color='orange', size = 4, opacity = 1)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig
#Ändra mode i confirmed till lines + markers
cnfrm.marker <- list(color='orange', size = 4, opacity = 1, width = 4)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 4, opacity = 1, width = 4)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 4, opacity = 1, line = list(color = 'blue', width = 4))
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 2, opacity = 1, line = list(color = 'orange', width = 2))
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 10, opacity = 1, line = list(color = 'orange', width = 2))
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 1, opacity = 1, line = list(color = 'orange', width = 2))
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
data_countrywise <- read_csv("countrywise.csv")
head(data_countrywise)
latest <- data_countrywise %>% filter(Date ==max(Date)) %>% arrange(desc(Confirmed))
data_countrywise <- read_csv("country_daywise.csv")
head(data_countrywise)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Confirmed))
head(latest)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Confirmed/Deaths))
head(latest)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Deaths/Confirmed))
head(latest)
latest$death_rate <- latest$Deaths/latest$Confirmed
head(latest)
#Sortera nu istället på confirmed cases och välj de 10 länder med högst antal confirmed cases.
#Gör en bar plot i plot_ly med valfri med hjälp av layout.
latest <- arrange(latest, desc(Confirmed))
head(latest)
latest <- latest[1:10, ]
print(latest)
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Apple Share Prices over time (2014)',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'AAPL_x',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'AAPL_y',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
showlegend = TRUE, width = 1100)
new_fig
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'Count',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'Country',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
width = 1100)
new_fig
latest <- latest[1:10, ]
latest
latest$Country <- factor(latest$Country)
plot_ly(latest, x =~Country, y =~confirmed, type = 'bar', name = 'Confirmed Cases')
plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases')
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases')
?plot_ly
plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases', color =~death_rate)
plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases')
plot_ly(latest, x =~Country, y =~Confirmed, colors =~death_rate, type = 'bar', name = 'Confirmed Cases')
plot_ly(latest, x =~Country, y =~Confirmed, color =~death_rate, type = 'bar', name = 'Confirmed Cases')
plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
colorbar(p)
p <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE)
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE)
p
#Facit: Det går givetvis inte med statistisk signifikans säga att MS Zaandam
#eller Vanuatu har högst dödsratio i världen.
data_countrywise <- read_csv("country_daywise.csv")
head(data_countrywise)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Deaths/Confirmed))
latest$death_rate <- round(latest$Deaths/latest$Confirmed, digits = 3)
head(latest)
#Facit:
latest <- arrange(latest, desc(Confirmed))
latest <- latest[1:10, ]
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'Count',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'Country',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
width = 1100)
new_fig
#Facit - saknar dock legend
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE)
p
?plot_ly
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE, +
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE, +
hovertemplate = paste('%{x}', '<br>lifeExp: %{text:.2s}<br>'))
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE,
hovertemplate = paste('%{x}', '<br>lifeExp: %{text:.2s}<br>'))
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate), showlegend = TRUE,
hovertemplate = paste('%{text}', '<br>lifeExp: %{text:.2s}<br>'))
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
?subplot
data <- read_csv("country_daywise.csv")
data <- read_csv("country_daywise.csv") %>% filter(Country == 'India') %>% arrange(Date)
fig1 <- plot_ly(data, x =~Date, y =~Confirmed, type = 'scatter', mode = 'lines', name = 'Confirmed Cases')
fig2 <- plot_ly(data, x =~Date, y =~Recovered, type = 'scatter', mode = 'lines', name = 'Recovered Cases')
fig3 <- plot_ly(data, x =~Date, y =~Deaths, type = 'scatter', mode = 'lines', name = 'Deaths Cases')
subplot(fig1, fig2, fig3, shareX = FALSE)
subplot(fig1, fig2, fig3, shareX = FALSE, nrows = 2)
head(data)
#Facit - saknar dock legend!
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed, color =~country, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
#Facit - saknar dock legend!
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed, color =~Country, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
#Facit - saknar dock legend!
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed, color =~Country, text =~death_rate,colors =~death_rate, type = 'bar', name = 'Confirmed Cases')
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, color =~death_rate,  text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, color =~death_rate, colors =heat.colors(n=100) text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, color =~death_rate, colors =heat.colors(n=100), text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', color =~Country, colors = heat.colors(n=10), size =~Confirmed, marker = list(size =~1e-4*Deaths))
#Skippa att använda storlek eller färg - använd istället alla länders data (inte bara top 10) i en scatter plot där
data <- data_countrywise %>% filter(Date == max(Date))
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers')
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country)
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, showlegend = F)
#Skippa att använda storlek eller färg - använd istället alla länders data (inte bara top 10) i en scatter plot där
data <- read_csv("country_daywise.csv") %>% filter(Date == max(Date))
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, showlegend = F)
#Skippa att använda storlek eller färg - använd istället alla länders data (inte bara top 10) i en scatter plot där
data <- read_csv("country_daywise.csv") %>% filter(Date == max(Date))
plot_ly(data = data, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, showlegend = F)
plot_ly(data = data, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, size = 2 showlegend = F)
plot_ly(data = data, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, size = 2, showlegend = F)
#Skippa att använda storlek eller färg - använd istället alla länders data (inte bara top 10) i en scatter plot.
#Se till att inte visa legends så att det inte blir plottrigt. utnyttja plotlys interaktivitet för att hovra över några länder
#med låg respektive hög dödlighet.
data <- read_csv("country_daywise.csv") %>% filter(Date == max(Date))
plot_ly(data = data, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, showlegend = F)
#Facit:
plot_ly(data_daywise, x = ~Date, y = ~Confirmed, type = 'scatter',mode = 'lines')
fig <- plot_ly(data_daywise, x=~ Date)
#Facit: (Källan slutade bara att rapportera recovered cases är förklaringen)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter')
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter')
fig
#Facit:
cnfrm.line <- list(color = 'blue', width = 4)
death.line <- list(color = 'red', width = 6)
recovered.line <- list(color = 'green', width =2)
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines', type = 'scatter', line = cnfrm.line)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Lägg till ett layoutargument med pipe operator som ger en titel och xaxis/yaxis titlar
#Facit:
fig <- fig %>% layout(title = 'Total Cases World Wide', xaxis = list(title = 'Date'), yaxis = list(title = 'Total Cases'))
fig
#Ändra mode i confirmed till lines + markers och ge
cnfrm.marker <- list(color='orange', size = 1, opacity = 1, line = list(color = 'orange', width = 2))
fig <- plot_ly(data_daywise, x=~ Date)
fig <- fig %>% add_trace(y =~ Confirmed, name = 'Confirmed', mode = 'lines+markers', type = 'scatter', line = cnfrm.line, marker = cnfrm.marker)
fig <- fig %>% add_trace(y =~ Recovered, name = 'Recovered', mode = 'lines', type = 'scatter', line = recovered.line)
fig <- fig %>% add_trace(y =~ Deaths, name = 'Deaths', mode = 'lines', type = 'scatter', line = death.line)
fig
#Facit: Det går givetvis inte med statistisk signifikans säga att MS Zaandam
#eller Vanuatu har högst dödsratio i världen.
data_countrywise <- read_csv("country_daywise.csv")
head(data_countrywise)
latest <- data_countrywise %>% filter(Date == max(Date)) %>% arrange(desc(Deaths/Confirmed))
latest$death_rate <- round(latest$Deaths/latest$Confirmed, digits = 3)
head(latest)
#Facit:
latest <- arrange(latest, desc(Confirmed))
latest <- latest[1:10, ]
new_fig <- plot_ly(latest, x =~Country, y =~Confirmed, type = 'bar') %>% layout(title = 'Confirmed Cases by Country',
plot_bgcolor='#e5ecf6',
xaxis = list(
title = 'Count',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
yaxis = list(
title = 'Country',
zerolinecolor = '#ffff',
zerolinewidth = 2,
gridcolor = 'ffff'),
width = 1100)
new_fig
#Facit - saknar dock legend!
latest$Country <- factor(latest$Country, levels = c(as.character(latest$Country)))
p <- plot_ly(latest, x =~Country, y =~Confirmed, text =~death_rate, type = 'bar', name = 'Confirmed Cases', marker = list(color =~death_rate))
p
data <- read_csv("country_daywise.csv") %>% filter(Country == 'India') %>% arrange(Date)
fig1 <- plot_ly(data, x =~Date, y =~Confirmed, type = 'scatter', mode = 'lines', name = 'Confirmed Cases')
fig2 <- plot_ly(data, x =~Date, y =~Recovered, type = 'scatter', mode = 'lines', name = 'Recovered Cases')
fig3 <- plot_ly(data, x =~Date, y =~Deaths, type = 'scatter', mode = 'lines', name = 'Deaths Cases')
subplot(fig1, fig2, fig3, shareX = FALSE, nrows = 2)
head(data)
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', color =~Country, colors = heat.colors(n=10), size =~Confirmed, marker = list(size =~1e-4*Deaths))
#Facit:
data <- read_csv("country_daywise.csv") %>% filter(Date == max(Date))
plot_ly(data = data, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', name =~Country, showlegend = F)
plot_ly(data = latest, x =~Confirmed, y=~Deaths, type = 'scatter', mode = 'markers', color =~Country, colors = heat.colors(n=10), size =~Confirmed, marker = list(size =~1e-4*Deaths))
fig1 <- plot_ly(latest, labels =~Country, values =~Confirmed, type = 'pie', textinfo = 'label+percent')
fig1
fig3 <- plot_ly(latest, labels =~Country, values =~death_rate, type = 'pie', textinfo = 'label+percent')
fig3
fig3 <- plot_ly(latest, labels =~Country, values =~death_rate, type = 'pie', textinfo = 'label')
fig3
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/knn.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
#install.packages('rjson')
install.packages('RJSONIO')
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
fig
?layout
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
fig
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
write.csv(df, "unemployed.csv", row.names = FALSE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/mapExample.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/GDPMap.R", echo=TRUE)
head(df)
df <- read.csv("gdp2014.csv")
head(df)
fig <- plot_ly(df, type='choropleth', locations=df$CODE, z=df$GDP..BILLIONS., text=df$COUNTRY, colorscale="Blues")
fig
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/GDPMap.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/GDPMap.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/GDPMap.R", echo=TRUE)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/GDPMap.R", echo=TRUE)
dim(df)
source("C:/Users/Carl Yeahndle/Desktop/Rstuff/GDPMap.R", echo=TRUE)
